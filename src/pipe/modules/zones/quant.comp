#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float radius;
  float epsilon;
  float gamma;
  int   num_zones;
  float zone0;
  float zone1;
  float zone2;
  float zone3;
  float zone4;
  float zone5;
  float zone6;
} params;


layout( // input rgb
    set = 1, binding = 0
) uniform sampler2D img_in;

layout( // output
    set = 1, binding = 1
) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;
  float lum = pow(clamp(luminance_rec2020(rgb), 0.0f, 1.0), params.gamma);
  const float nz = clamp(params.num_zones, 2, 7);
  // our guided filter somehow normalises/clamps at 1.0, so we provide our data in that range.
  // i suspect it's the clamp in guided2f.comp.
  float zone = clamp(floor(lum * nz), 0.0, nz-1.0)/(nz-1.0);
  imageStore(img_out, ipos, vec4(vec3(zone), 1));
}

